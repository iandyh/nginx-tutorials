= Nginx Variables (05) =

== Variables in Subrequests ==

=== A Detour to Subrequests ===

We have seen earlier that the lifetime of variable containers is bound to the
request, but I owe you a formal definition of "requests" there. You might have
assumed that the "requests" in that context are just those HTTP requests
initiated from the client side. In fact, there are two kinds of "requests" in
the Nginx world. One is called "main requests", and the other is called
"subrequests".

Main requests are those initiated externally by HTTP clients. All the examples
that we have seen so far involve main requests only, including those doing
"internal redirections" via the L<ngx_echo/echo_exec> or L<ngx_rewrite/rewrite>
directive.

Whereas subrequests are a special kind of requests initiated from within the
Nginx core. But please do not confuse subrequests with those HTTP requests
created by the L<ngx_proxy> modules! Subrequests may look very much like an
HTTP request in appearance, their implementation, however, has nothing to do
with neither the HTTP protocol nor any kind of socket communication. A
subrequest is an abstract invocation for decomposing the task of the main
request into smaller "internal requests" that can be served independently by
multiple different C<location> blocks, either in series or in parallel.
"Subrequests" can also be recursive: any subrequest can initiate more
sub-subrequests, targeting other C<location> blocks or even the current
C<location> itself. According to Nginx's terminology, if request A initiates a
subrequest B, then A is called the "parent request" of B. It is worth
mentioning that the Apache web server also has the concept of subrequests for
long, so readers coming from that world should be no stranger to this.

Let's check out an example using subrequests:

    :nginx
    location /main {
        echo_location /foo;
        echo_location /bar;
    }

    location /foo {
        echo foo;
    }

    location /bar {
        echo bar;
    }

Here in C<location /main>, we use the L<ngx_echo/echo_location> directive from
the L<ngx_echo> module to initiate two C<GET>-typed subrequests targeting
C</foo> and C</bar>, respectively. The subrequests initiated by
L<ngx_echo/echo_location> are always running sequentially according to their
literal order in the configuration file. Therefore, the second C</bar> request
will not be fired until the first C</foo> request completes processing. The
response body of these two subrequests get concatenated together according to
their running order, to form the final response body of their parent request
(for C</main>):

    :bash
    $ curl 'http://localhost:8080/main'
    foo
    bar

It should be noted that the communication of C<location> blocks via subrequests
is limited within the same C<server> block (i.e., the same virtual server
configuration), so when the Nginx core processes a subrequest, it just calls a
few C functions behind the scene, without doing any kind of network or UNIX
domain socket communication. For this reason, subrequests are extremely
efficient.

=== Independent Variable Containers in Subrequests ===

Back to our earlier discussion for the lifetime of Nginx variable containers,
now we can still state that the lifetime is bound to the current request, and
every request does have its own copy of all the variable containers. It is just
that the "request" here can be either a main request, or a subrequest.
Variables with the same name between a parent request and a subrequest will
generally not interfere with each other. Let's do a small experiment to confirm
this:

    :nginx
    location /main {
        set $var main;

        echo_location /foo;
        echo_location /bar;

        echo "main: $var";
    }

    location /foo {
        set $var foo;
        echo "foo: $var";
    }

    location /bar {
        set $var bar;
        echo "bar: $var";
    }

In this sample, we assign different values to the variable C<$var> in three
C<location> blocks, C</main>, C</foo>, and C</bar>, and output the value of
C<$var> in all these locations. In particular, we intentionally output the
value of C<$var> in C<location /main> I<after> calling the two subrequests, so
if value changes of C<$var> in the subrequests can affect their parent request,
we should see a new value output in location C</main>. The result of requesting
C</main> is as follows:

    :bash
    $ curl 'http://localhost:8080/main'
    foo: foo
    bar: bar
    main: main

Apparently, the assignments to variable C<$var> in those two subrequests do not
affect the main request C</main> at all. This successfully verifies that both
the main request and its subrequests do own different copies of variable
containers.

=== Shared Variable Containers among Requests ===

Unfortunately, subrequests initiated by certain Nginx modules do share variable
containers with their parent requests, like those initiated by the 3rd-party
module L<ngx_auth_request>. Below is such an example:

    :nginx
    location /main {
        set $var main;
        auth_request /sub;
        echo "main: $var";
    }

    location /sub {
        set $var sub;
        echo "sub: $var";
    }

Here in C<location /main>, we first assign the initial value C<main> to
variable C<$var>, then fire a subrequest to C</sub> via the
L<ngx_auth_request/auth_request> directive from the L<ngx_auth_request> module,
and finally output the value of C<$var>. Note that in C<location /sub> we
intentionally overwrite the value of C<$var> to C<sub>. When accessing
C</main>, we get

    :bash
    $ curl 'http://localhost:8080/main'
    main: sub

Obviously, the value change of C<$var> in the subrequest to C</sub> does affect
the main request to C</main>. Thus the variable container of C<$var> is indeed
shared between the main request and the subrequest created by the
L<ngx_auth_request> module.

For the previous example, some readers might ask: "why doesn't the response
body of the subrequest appear in the final output?" The answer is simple: it is
just because the L<ngx_auth_request/auth_request> directive discards the
response
body of the subrequest it manages, and only checks the response status code of
the subrequest. When the status code looks good, like C<200>,
L<ngx_auth_request/auth_request> will just allow Nginx continue processing the
main request; otherwise it will immediately abort the main request by
returning a C<403> error page, for example. In our example, the subrequest to
C</sub>
just return a C<200> response implicitly created by the L<ngx_echo/echo>
directive in C<location /sub>.

Even though sharing variable containers among the main request and all its
subrequests could make bidirectional data exchange easier, it could also lead
to unexpected subtle issues that are hard to debug in real-world
configurations. Because users often forget that a variable with the same name
is actually used in some deeply embedded subrequest and just use it for
something else in the main request, this variable could get unexpectedly
modified during processing. Such bad side effects make many 3rd-party modules
like L<ngx_echo>, L<ngx_lua> and
L<ngx_srcache> choose to disable the variable sharing behavior for subrequests
by
default.
